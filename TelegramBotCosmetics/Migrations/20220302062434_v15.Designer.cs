// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TelegramBotCosmetics.Domain;

#nullable disable

namespace TelegramBotCosmetics.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20220302062434_v15")]
    partial class v15
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("CatalogItem", b =>
                {
                    b.Property<Guid>("CatalogsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ItemsId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CatalogsId", "ItemsId");

                    b.HasIndex("ItemsId");

                    b.ToTable("CatalogItem");
                });

            modelBuilder.Entity("PeopleTypeCatalog", b =>
                {
                    b.Property<Guid>("PeoplesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TypeCatalogsId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("PeoplesId", "TypeCatalogsId");

                    b.HasIndex("TypeCatalogsId");

                    b.ToTable("PeopleTypeCatalog");
                });

            modelBuilder.Entity("TelegramBotCosmetics.Domain.Entity.Catalog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Href")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("People")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("TypeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("TypeId");

                    b.ToTable("Catalogs");
                });

            modelBuilder.Entity("TelegramBotCosmetics.Domain.Entity.Formula", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ItemId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ItemId");

                    b.ToTable("Formulas");
                });

            modelBuilder.Entity("TelegramBotCosmetics.Domain.Entity.Item", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Brend")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Href")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IdItemOnPage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ItemName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("People")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Price")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("TagId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("TagId");

                    b.ToTable("Items");
                });

            modelBuilder.Entity("TelegramBotCosmetics.Domain.Entity.People", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DataP")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Peoples");
                });

            modelBuilder.Entity("TelegramBotCosmetics.Domain.Entity.Tag", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("TelegramBotCosmetics.Domain.Entity.TypeCatalog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TypeCatalogs");
                });

            modelBuilder.Entity("TelegramBotCosmetics.Domain.Entity.WhiteFormula", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("L")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("V")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("WhiteFormulas");
                });

            modelBuilder.Entity("CatalogItem", b =>
                {
                    b.HasOne("TelegramBotCosmetics.Domain.Entity.Catalog", null)
                        .WithMany()
                        .HasForeignKey("CatalogsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TelegramBotCosmetics.Domain.Entity.Item", null)
                        .WithMany()
                        .HasForeignKey("ItemsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PeopleTypeCatalog", b =>
                {
                    b.HasOne("TelegramBotCosmetics.Domain.Entity.People", null)
                        .WithMany()
                        .HasForeignKey("PeoplesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TelegramBotCosmetics.Domain.Entity.TypeCatalog", null)
                        .WithMany()
                        .HasForeignKey("TypeCatalogsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TelegramBotCosmetics.Domain.Entity.Catalog", b =>
                {
                    b.HasOne("TelegramBotCosmetics.Domain.Entity.TypeCatalog", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Type");
                });

            modelBuilder.Entity("TelegramBotCosmetics.Domain.Entity.Formula", b =>
                {
                    b.HasOne("TelegramBotCosmetics.Domain.Entity.Item", null)
                        .WithMany("Formulas")
                        .HasForeignKey("ItemId");
                });

            modelBuilder.Entity("TelegramBotCosmetics.Domain.Entity.Item", b =>
                {
                    b.HasOne("TelegramBotCosmetics.Domain.Entity.Tag", "Tag")
                        .WithMany()
                        .HasForeignKey("TagId");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("TelegramBotCosmetics.Domain.Entity.Item", b =>
                {
                    b.Navigation("Formulas");
                });
#pragma warning restore 612, 618
        }
    }
}
